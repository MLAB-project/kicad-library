#! /usr/bin/python3

# Simple python3 command line utility for managing KiCad footprints

import repo
from optparse import OptionParser
from os import environ, chown
from pwd import getpwnam
from requests.exceptions import ConnectionError
from zipfile import BadZipFile


SERVER = "https://github.com/"
DEFAULT_CACHE = environ["HOME"] + "/.config/kicad/repos_cached.json"
DEFAULT_TABLE = environ["HOME"] + "/.config/kicad/fp-lib-table"
DEFAULT_GITHUB_USER = "KiCad"
GITHUB_API = "https://api.github.com/"

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-c", "--cache", dest="cache", metavar="FILE", help=
                      "Path to .json file with cached repos. Default = " + DEFAULT_CACHE,
                      default=DEFAULT_CACHE)
    parser.add_option("-f", "--foot-dir", dest="foot_dir", metavar="DIR", help=
                      "Footprints directory")
    parser.add_option("-t", "--table", dest="table", metavar="FILE", help=
                      "Path to fp-lib-table. Default = " + DEFAULT_TABLE,
                      default=DEFAULT_TABLE)
    parser.add_option("-u", "--user", dest="user", metavar="USER", help=
                      "github USER with footprints repos. Default = " + DEFAULT_GITHUB_USER,
                      default=DEFAULT_GITHUB_USER)
    options, args = parser.parse_args()


    if options.foot_dir == None:
        print("Error: No footprints directory")
        exit()
    
    try:
        repos_cached = repo.cache_read(options.cache)
    except (TypeError, FileNotFoundError, ValueError, PermissionError, IsADirectoryError):
        print("Warning: Cannot read " + options.cache)
        repos_cached = {}

    try:
        repos2update, status = repo.check_update(GITHUB_API + "users/" + options.user + "/repos", repos_cached)
        if status != 200: 
            print("Error: {0} {1}".format(GITHUB_API + "users/" + options.user + "/repos", status))
    except ConnectionError:
        print("Warning: Cannot fetch data from " + GITHUB_API + "users/" + options.user + "/repos")
        repos2update = {}
    
    if options.foot_dir[len(options.foot_dir) - 1] != "/": options.foot_dir += "/"

    if repos2update != {}:
        for item in repos2update.keys():
            print("Downloading: " + SERVER + item)
            try:
                status = repo.download("{0}{1}/archive/master.zip".format(SERVER, item),
                                       options.foot_dir + item + ".zip")
                if status != 200: 
                    print("Error: {0} {1}".format(SERVER + item, status))
                    exit()
            except (PermissionError, FileNotFoundError, KeyboardInterrupt):
                print("Error: Cannot create " + options.foot_dir + item + ".zip")
                exit()

            print("Extracting: " + options.foot_dir + item + ".zip")
            try:
                repo.extract(options.foot_dir + item + ".zip", options.foot_dir)
            except (FileNotFoundError, PermissionError, BadZipFile, KeyboardInterrupt):
                print("Error: Cannot extract " + options.foot_dir + item + ".zip",)
                exit()

    
    if repos2update != {}: 
        repos_cached.update(repos2update)
        try:
            repo.cache_write(options.cache, repos_cached)
        except (PermissionError, FileNotFoundError, PermissionError):
            print("Warning: Cannot write " + options.cache)
    
    print("Table from: " + options.foot_dir)
    try: 
        repo.mk_table(options.foot_dir, options.table)
    except (PermissionError, FileNotFoundError, IsADirectoryError):
        print("Error: Cannot create " + options.table)